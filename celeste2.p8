pico-8 cartridge // http://www.pico-8.com
version 29
__lua__

-- globals
room = 0
objects = {}

function _init()
	room_load(0)
end
-->8
input_x = 0
input_y = 0
input_x_turned = false
input_y_turned = false
input_jump = false
input_jump_pressed = false
input_grapple = false
input_grapple_pressed = false

function _update()

	-- input_x
	local prev_x = input_x
	if (btn(0)) then
		if (btn(1)) then
			if (input_x_turned) then
				input_x = prev_x
			else
				input_x = -prev_x
				input_x_turned = true
			end
		else
			input_x = -1
			input_x_turned = false
		end
	elseif (btn(1)) then
		input_x = 1
		input_x_turned = false
	else
		input_x = 0
		input_x_turned = false
	end

	-- input_y
	local prev_y = input_y
	if (btn(2)) then
		if (btn(3)) then
			if (input_y_turned) then
				input_y = prev_y
			else
				input_y = -prev_y
				input_y_turned = true
			end
		else
			input_y = -1
			input_y_turned = false
		end
	elseif (btn(3)) then
		input_y = 1
		input_y_turned = false
	else
		input_y = 0
		input_y_turned = false
	end

	-- input_jump
	local jump = btn(4)
	input_jump_pressed = jump and not input_jump
	input_jump = jump

	-- input_grapple
	local grapple = btn(5)
	input_grapple_pressed = grapple and not input_grapple
	input_grapple = grapple

	--objects
	for i = 1, #objects do
		objects[i]:update()
	end
end
-->8
function _draw()
	cls()
	map((room % 4) * 16, (room / 4) * 16, 0, 0, 16, 16, 1)

	for i=1,#objects do
		objects[i]:draw()
	end

	print("cpu: " .. flr(stat(1) * 100) .. "/100", 9, 9, 4)
	print("mem: " .. flr(stat(0)) .. "/2048", 9, 15, 4)
end

-->8

-- Objects:
#include object.lua
#include player.lua

crate = {}
crate.tile = 19
crate.base = object
crate.geom = g_solid
crate.init = function(self)
	self.spr = self.tile
end
crate.update = function(self) 
	self:move_y(1)
end

setmetatable(crate, lookup)
add(types, crate)

-->8

-- gets the tile at the given location in the CURRENT room
function room_tile_at(x, y)
	return mget((room % 4) * 16 + x, (room / 4) * 16 + y)
end

-- loads the given room
function room_load(index)
	room = index
	objects = {}

	for i = 0,15 do
		for j = 0,15 do
			for n=1,#types do
				if (room_tile_at(i, j) == types[n].tile) then
					create(types[n], i * 8, j * 8)
				end
			end
		end
	end
end

function sign(x)
	if (x < 0) then
		return -1
	elseif (x > 0) then
		return 1
	else
		return 0
	end
end

function approach(x, target, max_delta)
	if (x < target) then
		return min(x + max_delta, target)
	else
		return max(x - max_delta, target)
	end
end

__gfx__
00000000777777770011110001111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000700000070111111011144411000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700722222071114441111474471000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000722222071147447101444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000722222070144444000aaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007007222220700aaaa0000222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000722222070022220007000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000777777770070070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07777777777777777777777099999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777790000009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777790400409000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777771177777711777777790440009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777712217777122177777790044009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
71777122221111222217771790404409000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
72111222222222222221112790000009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
72222222222222222222222799999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7222222222222222222222270777777000000000000000002222222222222222dddddddddddddddddddddddd0000000000000000000000000000000000000000
7722222222222222222222777777777700000000000000002222222112222222ddddddddddddddd00ddddddd0000000000000000000000000000000000000000
7722222222222222222222777777777700000000000000002222221111222222dddddddddddddd0000dddddd0000000000000000000000000000000000000000
7772222222222222222227777717717700000000000000002222211111122222ddddddddddddd000000ddddd0000000000000000000000000000000000000000
7772222222222222222227777721127700000000000000002222111111112222dddddddddddd00000000dddd0000000000000000000000000000000000000000
7722222222222222222222777722227700000000000000002221111111111222ddddddddddd0000000000ddd0000000000000000000000000000000000000000
7722222222222222222222777772277700000000000000002211111111111122dddddddddd000000000000dd0000000000000000000000000000000000000000
7222222222222222222222270777777000000000000000002111111111111112ddddddddd00000000000000d0000000000000000000000000000000000000000
722222222222222222222227077777777777777777777770211111111111111211111111d00000000000000d0000000000000000000000000000000000000000
722222222222222222222227777777777777777777777777221111111111112211111111dd000000000000dd0000000000000000000000000000000000000000
722227222222222222222227777777777777777777777777222111111111122211111111ddd0000000000ddd0000000000000000000000000000000000000000
722222222222222222222227777777711777777117777777222211111111222211111111dddd00000000dddd0000000000000000000000000000000000000000
772222222222222222272277777777122177771221777777222221111112222211111111ddddd000000ddddd0000000000000000000000000000000000000000
777222222277772222222777717771222211112222177717222222111122222211111111dddddd0000dddddd0000000000000000000000000000000000000000
777772222777777222277777721112222222222222211127222222211222222211111111ddddddd00ddddddd0000000000000000000000000000000000000000
077777777777777777777770077777777777777777777770222222222222222211111111dddddddddddddddd0000000000000000000000000000000000000000
__gff__
0003000000000000000000000000000003030300000000000000000000000000030303000000010101010100000000000303030303030101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3837212131313131313131313131313600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
38272122283900002a2828282828282000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3838272228280000000000000028282000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3736372228290000000000000028282000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
213131320000000000000000002a282000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2228283900000000000000000000282000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22282829000000000000000000002a2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2228280000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2228290000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2228000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2134350000000002000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2228390000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2228283900000000001300000013002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2111111200003334343500001011112600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2726272213000000000000002021213800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3838382711111111111111112627263800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
